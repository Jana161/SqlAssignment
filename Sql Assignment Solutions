CREATE TABLE city
(
  id INT,
  name VARCHAR(17),
  country_code VARCHAR(10),
  district VARCHAR(20),
  population BIGINT
);




--Q1;

SELECT
  *
FROM
  city
WHERE
  country_code = 'USA'
  AND population > 100000
;


--Q2;

SELECT
  name AS city_name
FROM
  city
WHERE
  country_code = 'USA'
  AND population > 120000
;


--Q3;

SELECT
  id,
  name,
  country_code,
  district,
  population
FROM
  city
;


--Q4:

SELECT
  *
FROM
  city
WHERE
  id = 1661
;


--Q5;

SELECT
  id,
  name,
  country_code,
  district,
  population
FROM
  city
WHERE
  country_code = 'JPN'
;


--Q6:

SELECT
  name AS city_name
FROM
  city
WHERE
  country_code = 'JPN'
;

--drop table 

DROP TABLE city;


CREATE TABLE station(
   id INT,
  city VARCHAR(23),
  state VARCHAR(2),
  lat_n INT,
  long_n INT 
);



--Q7:

SELECT
  city,
  state
FROM
  station
;


--Q8:

SELECT
  DISTINCT city
FROM
  station
WHERE
  id % 2 = 0
;


--Q9:

SELECT
  COUNT(city) - COUNT(DISTINCT city) AS diff_between_all_city_unique_city
FROM
  station
;


--Q10:
￼
Commit new file
Commit summary￼Optional extended description


SELECT 
  city 
FROM
(
    (SELECT
      city,
      CHAR_LENGTH(city) as city_length
    FROM
      station
    ORDER BY 
      CHAR_LENGTH(city) DESC,
      city
    LIMIT 1)
  UNION
    (SELECT
      city,
      CHAR_LENGTH(city) as city_length
    FROM
      station
    ORDER BY 
      CHAR_LENGTH(city),
      city
    LIMIT 1)
) smallest_largest_city
;


--Q11:

SELECT
  distinct city
FROM
  station
WHERE 
  LEFT(LOWER(city) , 1) IN ('a','e','i','o','u')
;


--Q12:

SELECT
  distinct city
FROM
  station
WHERE 
  RIGHT(LOWER(city) , 1) IN ('a','e','i','o','u')
;


--Q13:

SELECT
  distinct city
FROM
  station
WHERE 
  LEFT(LOWER(city) , 1) NOT IN ('a','e','i','o','u')
;


--Q14:

SELECT
  distinct city
FROM
  station
WHERE 
  RIGHT(LOWER(city) , 1) NOT IN ('a','e','i','o','u')
;


--Q15:

SELECT
  distinct city
FROM
  station
WHERE 
  LEFT(LOWER(city) , 1) NOT IN ('a','e','i','o','u')
  OR RIGHT(LOWER(city) , 1) NOT IN ('a','e','i','o','u')
;


--Q16:

SELECT
  distinct city
FROM
  station
WHERE 
  LEFT(LOWER(city) , 1) NOT IN ('a','e','i','o','u')
  AND RIGHT(LOWER(city) , 1) NOT IN ('a','e','i','o','u')
;

--drop tables

DROP TABLE station;


--Q17:

CREATE TABLE product
(
  product_id INT,
  product_name VARCHAR(30),
  unit_price INT,
  CONSTRAINT pk_product PRIMARY KEY (product_id)
);

CREATE TABLE sales
(
  seller_id INT,
  product_id INT,
  buyer_id INT,
  sale_date DATE,
  quantity INT,
  price INT,
  CONSTRAINT fk_product FOREIGN KEY (product_id)
    REFERENCES product(product_id) 
);


SELECT
  p.product_id,
  p.product_name
FROM
  sales s
  JOIN product p ON p.product_id = s.product_id
WHERE
  s.sale_date >= STR_TO_DATE('2019-01-01', '%Y-%m-%d')
  AND s.sale_date <= STR_TO_DATE('2019-03-31', '%Y-%m-%d')
  AND NOT EXISTS(
    SELECT
      *
    FROM
      sales s2
    WHERE
      s.product_id = s2.product_id
      AND (s2.sale_date < STR_TO_DATE('2019-01-01', '%Y-%m-%d')
      OR s2.sale_date > STR_TO_DATE('2019-03-31', '%Y-%m-%d'))
  )
;

--drop tables

DROP TABLE sales;
DROP TABLE product;


--Q18:

CREATE TABLE views
(
  article_id INT,
  author_id INT,
  viewer_id INT,
  viewer_date DATE
);


SELECT
  DISTINCT author_id AS id
FROM
  views
WHERE
  author_id = viewer_id
ORDER BY
  author_id
;

--drop tables

DROP TABLE views;


--Q19:

CREATE TABLE delivery
(
  delivery_id INT,
  customer_id INT,
  order_date DATE,
  customer_pref_delivery_date DATE
);

SELECT
  ROUND(
    COUNT(
      CASE
        WHEN order_date = customer_pref_delivery_date
          THEN delivery_id
      END
    )*100.00/COUNT(*)
  , 2) AS immediate_percentage
FROM
  delivery
;

￼
Commit new file
Commit summary￼Optional extended description

--drop tables

DROP TABLE delivery;


--Q20:

CREATE TABLE ads
(
  ad_id INT,
  user_id INT,
  action ENUM('Clicked', 'Viewed', 'Ignored'),
  CONSTRAINT pk_ads PRIMARY KEY(ad_id, user_id)
);

WITH ad_stat AS(
  SELECT
    ad_id,
    COUNT(CASE
      WHEN action = 'Clicked'
        THEN user_id
    END) AS clicked_count,
    COUNT(CASE
      WHEN action = 'Viewed'
        THEN user_id
    END) AS viewed_count,
    COUNT(CASE
      WHEN action = 'Ignored'
        THEN user_id
    END) AS ignored_count
  FROM
    ads
  GROUP BY
    ad_id
)
SELECT
  ad_id,
  CASE
    WHEN clicked_count + viewed_count = 0
      THEN 0
    ELSE
      ROUND(
        clicked_count*100.00/(clicked_count+viewed_count)
       ,2)
  END AS ctr
FROM
  ad_stat
ORDER BY
  ctr DESC, ad_id
;

--drop tables

DROP TABLE ads;


--Q21:

CREATE TABLE employee
(
  employee_id INT,
  team_id INT,
  CONSTRAINT pk_employee PRIMARY KEY(employee_id)
);

SELECT
  employee_id,
  COUNT(*) OVER(PARTITION BY team_id) AS team_size
FROM
  employee
;

--drop tables

DROP TABLE employee;


--Q22:

CREATE TABLE countries
(
  country_id INT,
  country_name VARCHAR(30),
  CONSTRAINT pk_country PRIMARY KEY(country_id)
);

CREATE TABLE weather
(
  country_id INT,
  weather_state INT,
  day DATE,
  CONSTRAINT pk_weather PRIMARY KEY(country_id, day)
);


SELECT
  c.country_name,
  avg(weather_state) AS avg_state,
  CASE
    WHEN avg(weather_state) <= 15
      THEN 'Cold'
    WHEN avg(weather_state) >= 25
      THEN 'Hot'
    ELSE
      'Warm'
  END AS weather_type
FROM
  weather w
  JOIN countries c ON w.country_id = c.country_id
WHERE
  DATE_FORMAT(w.day, '%Y-%m') = '2019-11'
GROUP BY
  c.country_id,
  c.country_name
;

--drop tables

DROP TABLE countries;
DROP TABLE weather;


--Q23:

CREATE TABLE prices
(
  product_id INT,
  start_date DATE,
  end_date DATE,
  price INT,
  CONSTRAINT pk_prices PRIMARY KEY(product_id, start_date, end_date)
);

CREATE TABLE units_sold
(
  product_id INT,
  purchase_date DATE,
  units INT
);

SELECT
  p.product_id,
  ROUND(SUM(up.units*p.price)/SUM(up.units), 2) AS average_price
FROM
  units_sold up
  JOIN prices p ON up.product_id = p.product_id
    AND up.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY
  p.product_id
;

--drop tables

DROP TABLE prices;
DROP TABLE units_sold;


--Q24:

CREATE TABLE activity
(
  player_id INT,
  device_id INT,
  event_date DATE,
  games_played INT,
  CONSTRAINT pk_activity PRIMARY KEY(player_id, event_date)
);

SELECT
  DISTINCT player_id,
  FIRST_VALUE(event_date) OVER(PARTITION BY player_id ORDER BY event_date) AS first_login
FROM
  activity
;


--Q25:

SELECT
  DISTINCT player_id,
  FIRST_VALUE(device_id) OVER(PARTITION BY player_id ORDER BY event_date) AS first_login
FROM
  activity
;

--drop tables

DROP TABLE activity;


--Q26:

CREATE TABLE products
(
  product_id INT,
  product_name VARCHAR(30),
  product_category VARCHAR(30),
  CONSTRAINT pk_products PRIMARY KEY(product_id)
);

CREATE TABLE orders
(
  product_id INT,
  order_date DATE,
  unit INT,
  CONSTRAINT fk_product FOREIGN KEY (product_id)
    REFERENCES products(product_id) 
);


SELECT
  p.product_name,
  SUM(unit) AS unit
FROM
  products p
  JOIN orders o ON p.product_id = o.product_id
WHERE
  DATE_FORMAT(o.order_date, '%Y-%m') = '2020-02'
GROUP BY 
  p.product_id,
  p.product_name
HAVING
  SUM(unit) >= 100
;

--drop tables

DROP TABLE orders;
DROP TABLE products;


--Q27:

CREATE TABLE users
(
  user_id INT,
  name VARCHAR(30),
  mail VARCHAR(50),
  CONSTRAINT pk_users PRIMARY KEY(user_id)
);



SELECT
  user_id,
  name,
  mail
FROM
  users
WHERE
  REGEXP_LIKE(mail, '^[a-zA-Z][a-zA-Z0-9\_\.\-]*@leetcode.com')
;

--drop tables

DROP TABLE users;


--Q28:

CREATE TABLE customers
(
  customer_id INT,
  name VARCHAR(30),
  country VARCHAR(50),
  CONSTRAINT pk_customers PRIMARY KEY(customer_id)
);


CREATE TABLE products
(
  product_id INT,
  name VARCHAR(30),
  price VARCHAR(50),
  CONSTRAINT pk_products PRIMARY KEY(product_id)
);

CREATE TABLE orders
(
  order_id INT,
  customer_id INT,
  product_id INT,
  order_date DATE,
  quantity INT,
  CONSTRAINT pk_orders PRIMARY KEY(order_id)
);


select 
    o.customer_id,
    c.name
from 
  orders o
  JOIN products p ON p.product_id = o.product_id
  JOIN customers c ON c.customer_id = o.customer_id
GROUP BY
  o.customer_id
HAVING 
(
    SUM(
      CASE 
        WHEN o.order_date LIKE '2020-06%' 
          THEN o.quantity*p.price 
        ELSE 0 
      END
    ) >= 100
    AND
    SUM(
      CASE 
        WHEN o.order_date LIKE '2020-07%' 
          THEN o.quantity*p.price 
        ELSE 0 
      END
    ) >= 100
)
;

--drop tables

DROP TABLE customers;
DROP TABLE orders;
DROP TABLE products;


--Q29:

CREATE TABLE tv_program
(
  program_date DATE,
  content_id INT,
  channel VARCHAR(30),
  CONSTRAINT pk_tv_program PRIMARY KEY(program_date, content_id)
);

CREATE TABLE content
(
  content_id INT,
  title VARCHAR(50),
  kids_content ENUM('Y', 'N'),
  content_type VARCHAR(20),
  CONSTRAINT pk_content PRIMARY KEY(content_id)
);


SELECT 
  DISTINCT title
FROM 
  content c
  JOIN tv_program tv ON c.content_id = tv.content_id
where c.kids_content = 'Y' 
  and c.content_type = 'Movies' 
  and DATE_FORMAT(tv.program_date, '%Y-%m') = '2020-06'
;

--drop tables

DROP TABLE content;
DROP TABLE tv_program;


--Q30:

CREATE TABLE npv
(
  id INT,
  year INT,
  npv INT,
  CONSTRAINT pk_npv PRIMARY KEY(id, year)
);

CREATE TABLE queries
(
  id INT,
  year INT,
  CONSTRAINT pk_quereis PRIMARY KEY(id,year)
);

SELECT 
  q.id,
  q.year, 
  ifnull(n.npv,0) as npv
FROM 
  queries AS q
  LEFT JOIN npv AS n ON q.id = n.id AND q.year = n.year
;

--drop tables

DROP TABLE queries;
DROP TABLE npv;


--Q31:

CREATE TABLE npv
(
  id INT,
  year INT,
  npv INT,
  CONSTRAINT pk_npv PRIMARY KEY(id, year)
);

CREATE TABLE queries
(
  id INT,
  year INT,
  CONSTRAINT pk_quereis PRIMARY KEY(id,year)
);


SELECT 
  q.id,
  q.year, 
  ifnull(n.npv,0) as npv
FROM 
  queries AS q
  LEFT JOIN npv AS n ON q.id = n.id AND q.year = n.year
;

--drop tables

DROP TABLE queries;
DROP TABLE npv;


--Q32:

CREATE TABLE employees
(
  id INT,
  name VARCHAR(30),
  CONSTRAINT pk_employees PRIMARY KEY(id)
);

CREATE TABLE employee_uni
(
  id INT,
  unique_id INT,
  CONSTRAINT pk_employee_uni PRIMARY KEY(id, unique_id)
);


SELECT
  eu.unique_id,
  e.name
FROM
  employees e
  LEFT JOIN employee_uni eu ON e.id = eu.id
;

--drop tables

DROP TABLE employee_uni;
DROP TABLE employees;


--Q33:

CREATE TABLE users
(
  id INT,
  name VARCHAR(30),
  CONSTRAINT pk_users PRIMARY KEY(id)
);

CREATE TABLE rides
(
  id INT,
  user_id INT,
  distance INT,
  CONSTRAINT pk_rides PRIMARY KEY(id)
);



SELECT
  u.name,
  SUM(CASE
    WHEN r.distance IS NULL
      THEN 0
    ELSE
      r.distance
  END) AS travelled_distance
FROM
  users u
  LEFT JOIN rides r ON u.id = r.user_id
GROUP BY
  u.id,
  u.name
ORDER BY
  travelled_distance DESC,
  u.name
;

--drop tables

DROP TABLE users;
DROP TABLE rides;

--Q34:

CREATE TABLE products
(
  product_id INT,
  product_name VARCHAR(30),
  product_category VARCHAR(30),
  CONSTRAINT pk_products PRIMARY KEY(product_id)
);

CREATE TABLE orders
(
  product_id INT,
  order_date DATE,
  unit INT,
  CONSTRAINT fk_product FOREIGN KEY (product_id)
    REFERENCES products(product_id) 
);

SELECT
  p.product_name,
  SUM(unit) AS unit
FROM
  products p
  JOIN orders o ON p.product_id = o.product_id
WHERE
  DATE_FORMAT(o.order_date, '%Y-%m') = '2020-02'
GROUP BY 
  p.product_id,
  p.product_name
HAVING
  SUM(unit) >= 100
;

--drop tables

DROP TABLE orders;
DROP TABLE products;


--Q35:

CREATE TABLE movies
(
  movie_id INT,
  title VARCHAR(25),
  CONSTRAINT pk_movies PRIMARY KEY(movie_id)
);

CREATE TABLE users
(
  user_id INT,
  name VARCHAR(25),
  CONSTRAINT pk_users PRIMARY KEY(user_id)
);

CREATE TABLE movie_rating
(
  movie_id INT,
  user_id INT,
  rating INT,
  created_at DATE,
  CONSTRAINT pk_movie_rating PRIMARY KEY(movie_id, user_id)
);


(
  SELECT
    u.name AS result
  FROM
    movie_rating mr 
    JOIN users u on mr.user_id = u.user_id
  GROUP BY
    u.user_id,
    u.name
  ORDER BY 
    COUNT(*) DESC,
    u.name ASC
  LIMIT 1
)
UNION 
(
  SELECT
    m.title AS result
  FROM
    movie_rating mr 
    JOIN movies m on mr.movie_id = m.movie_id
  WHERE
    DATE_FORMAT(mr.created_at, '%Y-%m') = '2020-02'
  GROUP BY
    m.movie_id,
    m.title
  ORDER BY 
    AVG(rating) DESC,
    m.title ASC
  LIMIT 1
) 
;

--drop tables

DROP TABLE users;
DROP TABLE movies;
DROP TABLE movie_rating;


--Q36:

CREATE TABLE users
(
  id INT,
  name VARCHAR(30),
  CONSTRAINT pk_users PRIMARY KEY(id)
);

CREATE TABLE rides
(
  id INT,
  user_id INT,
  distance INT,
  CONSTRAINT pk_rides PRIMARY KEY(id)
);



SELECT
  u.name,
  SUM(CASE
    WHEN r.distance IS NULL
      THEN 0
    ELSE
      r.distance
  END) AS travelled_distance
FROM
  users u
  LEFT JOIN rides r ON u.id = r.user_id
GROUP BY
  u.id,
  u.name
ORDER BY
  travelled_distance DESC,
  u.name
;

--drop tables

DROP TABLE users;
DROP TABLE rides;


--Q37:

CREATE TABLE employees
(
  id INT,
  name VARCHAR(30),
  CONSTRAINT pk_employees PRIMARY KEY(id)
);

CREATE TABLE employee_uni
(
  id INT,
  unique_id INT,
  CONSTRAINT pk_employee_uni PRIMARY KEY(id, unique_id)
);


SELECT
  eu.unique_id,
  e.name
FROM
  employees e
  LEFT JOIN employee_uni eu ON e.id = eu.id
;

--drop tables

DROP TABLE employee_uni;
DROP TABLE employees;


--Q38:

CREATE TABLE departments
(
  id INT,
  name VARCHAR(30),
  CONSTRAINT pk_department PRIMARY KEY(id)
);

CREATE TABLE students
(
  id INT,
  name VARCHAR(30),
  department_id INT,
  CONSTRAINT pk_students PRIMARY KEY(id)
);


SELECT
  s.id,
  s.name
FROM
  students s
  LEFT JOIN departments d ON s.department_id = d.id
WHERE
  d.id IS NULL;

--drop tables

DROP TABLE students;
DROP TABLE departments;


--Q39:

CREATE TABLE calls
(
  from_id INT,
  to_id INT,
  duration INT
);

SELECT 
  CASE 
    WHEN from_id < to_id 
      THEN from_id 
      ELSE 
        to_id 
  END AS person1, 
  CASE 
    WHEN from_id < to_id 
      THEN to_id 
    ELSE 
      from_id
  END AS  person2, 
  COUNT(*) AS call_count,
  SUM(duration) AS duration
FROM calls 
GROUP BY 
  CASE 
    WHEN from_id < to_id 
      THEN from_id 
      ELSE 
        to_id 
  END, 
  CASE 
    WHEN from_id < to_id 
      THEN to_id 
    ELSE 
      from_id
  END
;

--drop tables

DROP TABLE calls;


 --Q40:

 CREATE TABLE prices
(
  product_id INT,
  start_date DATE,
  end_date DATE,
  price INT,
  CONSTRAINT pk_prices PRIMARY KEY(product_id, start_date, end_date)
);

CREATE TABLE units_sold
(
  product_id INT,
  purchase_date DATE,
  units INT
);


SELECT
  p.product_id,
  ROUND(SUM(up.units*p.price)/SUM(up.units), 2) AS average_price
FROM
  units_sold up
  JOIN prices p ON up.product_id = p.product_id
    AND up.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY
  p.product_id
;

--drop tables

DROP TABLE prices;
DROP TABLE units_sold;


--Q41:

CREATE TABLE warehouse
(
  name VARCHAR(30),
  product_id INT,
  units INT,
  CONSTRAINT pk_warehouse PRIMARY KEY(name, product_id)
);

CREATE TABLE products
(
  product_id INT,
  product_name VARCHAR(30),
  width INT,
  length INT,
  height INT,
  CONSTRAINT pk_products PRIMARY KEY(product_id)
);

SELECT
  w.name,
  SUM(p.height*p.width*p.length*w.units) AS volume
FROM
  warehouse w
  JOIN products p ON w.product_id = p.product_id
GROUP BY
  w.name
;

--drop tables

DROP TABLE warehouse;
DROP TABLE products;


--Q42:

CREATE TABLE sales
(
  sale_date DATE,
  fruit VARCHAR(10),
  sold_num INT,
  CONSTRAINT pk_sales PRIMARY KEY(sale_date, fruit)
);


SELECT 
  sale_date,
  SUM(
    CASE 
      WHEN fruit = 'apples' 
        THEN sold_num
      WHEN fruit = 'oranges' 
        THEN (-1)*sold_num 
    END
  ) AS diff
FROM 
  sales
GROUP BY
  sale_date
ORDER BY
  sale_date
;

--drop tables

DROP TABLE sales;


--Q43:

CREATE TABLE activity
(
  player_id INT,
  device_id INT,
  event_date DATE,
  games_played INT,
  CONSTRAINT pk_activity PRIMARY KEY(player_id, event_date)
);


WITH logged_in_prev_day AS(
  SELECT
    count(DISTINCT player_id) AS player_count
  FROM
    activity a1
  WHERE
    EXISTS(
      SELECT
        *
      FROM
        activity a2
      WHERE
        a1.player_id = a2.player_id
        AND a1.event_date = DATE_ADD(a2.event_date, INTERVAL 1 DAY)
    )
),
all_player AS(
  SELECT
    count(DISTINCT player_id) AS total_player_count
  FROM
    activity
)
SELECT
  ROUND(
    (SELECT
      player_count
    FROM
      logged_in_prev_day)*1.00/
    (SELECT
      total_player_count
    FROM
    all_player)
  ,2) AS fraction
;

--drop tables

DROP TABLE activity;


--Q44:

CREATE TABLE employee
(
  id INT,
  name VARCHAR(30),
  department VARCHAR(30),
  manager_id INT,
  CONSTRAINT pk_employee PRIMARY KEY(id)
);


WITH RECURSIVE emp_hir AS  
(
  SELECT
    id,
    manager_id, 
    1 as lvl 
  FROM 
    employee 
  WHERE
    manager_id is null
  UNION
  SELECT 
    em.id,
    em.manager_id, 
    eh.lvl + 1 as lvl 
  FROM
    emp_hir eh 
    JOIN employee em ON eh.id = em.manager_id
)
SELECT 
  emp.name 
FROM 
  emp_hir eh1
  JOIN employee emp ON emp.id = eh1.manager_id
GROUP BY 
  eh1.lvl,
  eh1.manager_id,
  emp.name
HAVING 
  COUNT(*) >= 5
;

--drop tables

DROP TABLE employee;


--Q45:

CREATE TABLE department
(
  dept_id INT,
  dept_name VARCHAR(30),
  CONSTRAINT pk_department PRIMARY KEY(dept_id)
);

CREATE TABLE student
(
  student_id INT,
  student_name VARCHAR(30),
  gender VARCHAR(1),
  dept_id INT,
  CONSTRAINT pk_student PRIMARY KEY(student_id),
  CONSTRAINT fk_department FOREIGN KEY (dept_id)
    REFERENCES department(dept_id) 
);


SELECT
  d.dept_name,
  count(
    CASE
      WHEN s.dept_id IS NOT NULL
        THEN d.dept_id
    END
  ) AS student_number
FROM
  department d
  LEFT JOIN student s ON d.dept_id = s.dept_id
GROUP BY
  d.dept_id,
  d.dept_name
ORDER BY
  student_number DESC,
  dept_name
;

--drop tables

DROP TABLE student;
DROP TABLE department;


--Q46:

CREATE TABLE customer
(
  customer_id INT,
  product_key INT
);

CREATE TABLE product
(
  product_key INT,
  CONSTRAINT pk_product PRIMARY KEY(product_key)
);

SELECT 
  customer_id
FROM 
  customer 
GROUP BY 
    customer_id
HAVING 
  COUNT(distinct product_key) = (SELECT COUNT(*) FROM product)
;

--drop tables

DROP TABLE customer;
DROP TABLE product;


--Q47:

CREATE TABLE project
(
  project_id INT,
  employee_id INT,
  CONSTRAINT pk_project PRIMARY KEY(project_id, employee_id)
);

CREATE TABLE employee
(
  employee_id INT,
  name VARCHAR(30),
  experience_years INT,
  CONSTRAINT pk_employee PRIMARY KEY(employee_id)
);

WITH employee_exp_serialized AS(
  SELECT
    e.employee_id,
    p.project_id,
    DENSE_RANK() OVER(PARTITION BY p.project_id ORDER BY e.experience_years DESC) as experience_serial
  FROM
    employee e
    JOIN project p ON p.employee_id = e.employee_id
)
SELECT
  project_id,
  employee_id
FROM
  employee_exp_serialized
WHERE 
  experience_serial = 1
;

--drop tables

DROP TABLE project;
DROP TABLE employee;


--Q48:
--No Orders data

CREATE TABLE books
(
  book_id INT,
  name VARCHAR(30),
  avaialable_from DATE,
  CONSTRAINT pk_books PRIMARY KEY(book_id)
);

CREATE TABLE orders
(
  order_id INT,
  book_id INT,
  quantity INT,
  dispatch_date DATE,
  CONSTRAINT pk_orders PRIMARY KEY(order_id),
  CONSTRAINT fk_orders FOREIGN KEY (book_id)
    REFERENCES books(book_id) 
);


WITH last_year_sales AS(
  SELECT
    o.book_id,
    sum(quantity) AS total_sold
  FROM
    orders o
  WHERE
    o.dispatch_date >= DATE_SUB("2019-06-23", INTERVAL 1 YEAR)
  GROUP BY
    o.book_id
)
SELECT 
  b.name
FROM
  books b
  LEFT JOIN last_year_sales l_y_sales ON b.book_id = l_y_sales.book_id
WHERE
  (
    l_y_sales.total_sold < 10
    OR l_y_sales.total_sold is NULL
  )
  AND b.avaialable_from <= DATE_SUB("2019-06-23", INTERVAL 1 MONTH)
;

--drop tables

DROP TABLE orders;
DROP TABLE books;


--Q49:

CREATE TABLE enrollments
(
  student_id INT,
  course_id INT,
  grade INT,
  CONSTRAINT pk_enrollments PRIMARY KEY(student_id, course_id)
);


WITH serailized_enrollments AS(
  SELECT
    *,
    DENSE_RANK()
      OVER(PARTITION BY student_id ORDER BY grade DESC, course_id) AS serial
  FROM
    enrollments
)
SELECT
  student_id,
  course_id,
  grade
FROM
  serailized_enrollments
WHERE
  serial = 1
;

--drop tables

DROP TABLE enrollments;


--Q50:

CREATE TABLE players
(
  player_id INT,
  group_id INT,
  CONSTRAINT pk_players PRIMARY KEY(player_id)
);

CREATE TABLE matches
(
  match_id INT,
  first_player INT,
  second_player INT,
  first_score INT,
  second_score INT,
  CONSTRAINT pk_matches PRIMARY KEY(match_id)
);


WITH player_score AS(
  SELECT
    p.group_id,
    p.player_id,
    SUM(CASE
      WHEN p.player_id = m.first_player
        THEN m.first_score
      WHEN p.player_id = m.second_player
        THEN m.second_score
    END) AS score
  FROM
    players p
    JOIN matches m ON p.player_id = m.first_player OR p.player_id = m.second_player
  GROUP BY
    p.group_id,
    p.player_id
),
ranked_player AS(
  SELECT
    group_id,
    player_id,
    score,
    DENSE_RANK() OVER (PARTITION BY group_id ORDER BY score DESC,player_id) AS player_rank
  FROM
    player_score
)
SELECT
  group_id,
  player_id
FROM  
  ranked_player
WHERE
  player_rank = 1
;

--drop tables

DROP TABLE players;
DROP TABLE matches;

